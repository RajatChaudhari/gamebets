//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class premierleagueEntities : DbContext
    {
        public premierleagueEntities()
            : base("name=premierleagueEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BetCategoryTable> BetCategoryTables { get; set; }
        public virtual DbSet<BetPlacedTable> BetPlacedTables { get; set; }
        public virtual DbSet<BetResultsTable> BetResultsTables { get; set; }
        public virtual DbSet<BetTypeTable> BetTypeTables { get; set; }
        public virtual DbSet<GameTable> GameTables { get; set; }
        public virtual DbSet<PlayerTable> PlayerTables { get; set; }
        public virtual DbSet<StatsTable> StatsTables { get; set; }
        public virtual DbSet<TeamTable> TeamTables { get; set; }
        public virtual DbSet<UserTable> UserTables { get; set; }
    
        public virtual ObjectResult<GetBets_Result> GetBets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBets_Result>("GetBets");
        }
    
        public virtual ObjectResult<GetGameDetails_Result> GetGameDetails(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGameDetails_Result>("GetGameDetails", gameIDParameter);
        }
    
        public virtual ObjectResult<GetPlayersForMatch_Result> GetPlayersForMatch(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlayersForMatch_Result>("GetPlayersForMatch", gameIDParameter);
        }
    
        public virtual int SaveBets(Nullable<int> userId, Nullable<int> gameId, Nullable<int> betTypeId, Nullable<int> betCategory, Nullable<int> teamId, Nullable<int> playerId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var gameIdParameter = gameId.HasValue ?
                new ObjectParameter("GameId", gameId) :
                new ObjectParameter("GameId", typeof(int));
    
            var betTypeIdParameter = betTypeId.HasValue ?
                new ObjectParameter("BetTypeId", betTypeId) :
                new ObjectParameter("BetTypeId", typeof(int));
    
            var betCategoryParameter = betCategory.HasValue ?
                new ObjectParameter("BetCategory", betCategory) :
                new ObjectParameter("BetCategory", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveBets", userIdParameter, gameIdParameter, betTypeIdParameter, betCategoryParameter, teamIdParameter, playerIdParameter);
        }
    }
}
